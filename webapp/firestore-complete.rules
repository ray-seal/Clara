rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is owner or admin
    function isOwnerOrAdmin(userId) {
      return isOwner(userId) || isAdmin();
    }

    // Profiles collection
    match /profiles/{userId} {
      allow read: if true; // Public profiles for discovery
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwnerOrAdmin(userId);
      allow delete: if isAdmin(); // Only admins can delete profiles
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if true; // Public posts
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.userId &&
                      request.resource.data.keys().hasAll(['content', 'userId', 'createdAt']) &&
                      request.resource.data.content is string &&
                      request.resource.data.content.size() <= 2000; // Max 2000 characters
      allow update: if isAuthenticated() && 
                      (isOwner(resource.data.userId) || isAdmin()) &&
                      // Only allow updating specific fields
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likesCount', 'commentsCount']);
      allow delete: if isOwnerOrAdmin(resource.data.userId);
    }

    // Comments collection
    match /comments/{commentId} {
      allow read: if true; // Public comments
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.userId &&
                      request.resource.data.keys().hasAll(['postId', 'userId', 'content', 'createdAt']) &&
                      request.resource.data.content is string &&
                      request.resource.data.content.size() <= 1000 && // Max 1000 characters
                      request.resource.data.content.size() > 0; // Not empty
      allow update: if false; // Comments cannot be edited
      allow delete: if isOwnerOrAdmin(resource.data.userId);
    }

    // Reports collection (sensitive - restricted access)
    match /reports/{reportId} {
      allow read: if isAdmin(); // Only admins can read reports
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.reportedBy &&
                      request.resource.data.keys().hasAll(['postId', 'reportedUserId', 'reportedBy', 'reason', 'createdAt']) &&
                      request.resource.data.reason in ['inappropriate', 'spam', 'harassment', 'misinformation', 'other'] &&
                      request.resource.data.status == 'pending';
      allow update: if isAdmin() && 
                      // Only allow updating status
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']);
      allow delete: if isAdmin();
    }

    // Friends collection
    match /friends/{friendId} {
      allow read: if true; // Public friend lists for discovery
      allow create: if isAuthenticated() && 
                      (isOwner(request.resource.data.userId) || isOwner(request.resource.data.friendUserId));
      allow update: if false; // Friends cannot be updated, only created/deleted
      allow delete: if isAuthenticated() && 
                      (isOwner(resource.data.userId) || isOwner(resource.data.friendUserId) || isAdmin());
    }

    // Friend requests collection
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() && 
                    (isOwner(resource.data.fromUserId) || isOwner(resource.data.toUserId));
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.fromUserId &&
                      request.resource.data.fromUserId != request.resource.data.toUserId; // Can't friend yourself
      allow update: if isAuthenticated() && 
                      isOwner(resource.data.toUserId) && 
                      // Only allow updating status
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']);
      allow delete: if isAuthenticated() && 
                      (isOwner(resource.data.fromUserId) || isOwner(resource.data.toUserId) || isAdmin());
    }

    // Chat rooms collection
    match /chatRooms/{roomId} {
      allow read: if isAuthenticated() && 
                    request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
                      request.auth.uid in request.resource.data.participants &&
                      request.resource.data.participants.size() >= 2; // At least 2 participants
      allow update: if isAuthenticated() && 
                      request.auth.uid in resource.data.participants;
      allow delete: if isAdmin();
    }

    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
                    // Check if user is participant in the chat room
                    request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(resource.data.chatRoomId)).data.participants;
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.userId &&
                      request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(request.resource.data.chatRoomId)).data.participants &&
                      request.resource.data.content.size() <= 1000; // Max message length
      allow update: if false; // Messages cannot be edited
      allow delete: if isOwnerOrAdmin(resource.data.userId);
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
                      // Allow system to create notifications or user creating for themselves
                      (request.resource.data.userId == request.auth.uid || isAdmin());
      allow update: if isAuthenticated() && 
                      isOwner(resource.data.userId) &&
                      // Only allow updating read status
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
      allow delete: if isAuthenticated() && 
                      (isOwner(resource.data.userId) || isAdmin());
    }

    // FCM tokens collection
    match /fcmTokens/{tokenId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && 
                      (isOwner(resource.data.userId) || isAdmin());
    }

    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }

    // Analytics collection (admin read, system write)
    match /analytics/{document=**} {
      allow read: if isAdmin();
      allow write: if false; // Only Cloud Functions can write analytics
    }

    // System configuration (admin only)
    match /config/{document=**} {
      allow read, write: if isAdmin();
    }
  }
}